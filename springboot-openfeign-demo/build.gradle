plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'me.zaccoding'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR1")
    set('feignVersion', "10.7.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.h2database:h2'

    // https://mvnrepository.com/artifact/com.netflix.ribbon/ribbon
    // implementation group: 'com.netflix.ribbon', name: 'ribbon', version: '2.7.17'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'

    implementation "io.github.openfeign:feign-core:${feignVersion}"
    implementation "io.github.openfeign:feign-gson:${feignVersion}"
    implementation "io.github.openfeign:feign-slf4j:${feignVersion}"
    implementation "io.github.openfeign:feign-ribbon:${feignVersion}"
    implementation "io.github.openfeign:feign-annotation-error-decoder:1.1.2"

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:28.1-jre'


    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveName = 'demo.jar'
}

bootRun {
    // jvm options
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }

    // arguments
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}
